#!/bin/sh

X11_MODE=0
MWF_MODE=1
COCOASHARP_MODE=0

PWD=`pwd`
# Fetch the path relative to the launch point where this shell script exists.
APP_PATH=`echo $0 | awk '{split($0,patharr,"/"); idx=1; while(patharr[idx+3] != "") { if (patharr[idx] != "/") {printf("%s/", patharr[idx]); idx++ }} }'`

# Fetch the app name (its our own name)
APP_NAME=`echo $0 | awk '{split($0,patharr,"/"); idx=1; while(patharr[idx+1] != "") {idx++} printf("%s", patharr[idx]); }'`
ASSEMBLY=`echo $0 | awk '{split($0,patharr,"/"); idx=1; while(patharr[idx+1] != "") {idx++} printf("%s.exe", patharr[idx]); }'`

#find mono
MONO_EXE=`which mono`
if [ -x "${MONO_EXE}" ]; then
    echo Mono installed in path
else
    MONO_EXE="/Library/Frameworks/Mono.framework/Versions/Current/bin/mono"
fi
echo Mono at $MONO_EXE

#mono version check
REQUIRED_MAJOR=5
REQUIRED_MINOR=0

VERSION_TITLE="Cannot launch $APP_NAME"
VERSION_MSG="$APP_NAME requires the Mono Framework version $REQUIRED_MAJOR.$REQUIRED_MINOR or later."
DOWNLOAD_URL="http://www.go-mono.com/mono-downloads/download.html"
 
MONO_VERSION="$(${MONO_EXE} --version | awk '/version/ { print $5 }')"
echo Mono version $MONO_VERSION
MONO_VERSION_MAJOR="$(echo $MONO_VERSION | cut -f1 -d.)"
MONO_VERSION_MINOR="$(echo $MONO_VERSION | cut -f2 -d.)"

if [ -z "$MONO_VERSION" ] \
	|| [ $MONO_VERSION_MAJOR -lt $REQUIRED_MAJOR ] \
    || [ $MONO_VERSION_MAJOR -eq $REQUIRED_MAJOR -a $MONO_VERSION_MINOR -lt $REQUIRED_MINOR ]
then
	osascript \
	-e "set question to display dialog \"$VERSION_MSG\" with title \"$VERSION_TITLE\" buttons {\"Cancel\", \"Download...\"} default button 2" \
	-e "if button returned of question is equal to \"Download...\" then open location \"$DOWNLOAD_URL\""
	echo "$VERSION_TITLE"
	echo "$VERSION_MSG"
	exit 1
fi

# Setup the environment for MWF if needed
if [ "$MWF_MODE" -eq "1" ]; then
	export MONO_MWF_MAC_FORCE_X11=1  
fi

# Setup the environment for Cocoa# if needed
if [ "$COCOASHARP_MODE" -eq "1" ]; then
	export MONO_GDIP_USE_COCOA_BACKEND=1
	export DYLD_LIBRARY_PATH=$PWD/$APP_PATH/Contents/Resources:$DYLD_LIBRARY_PATH
fi

cd "$APP_PATH/Contents/Resources"

if [ "$X11_MODE" -eq "1" ]; then
	open-x11 "$APP_NAME"
else
	if [ ! -d "./bin" ]; then mkdir bin ; fi
	if [ -f "./bin/$APP_NAME" ]; then rm -f "./bin/$APP_NAME" ; fi
	ln -s "${MONO_EXE}" "./bin/$APP_NAME" 
	"./bin/$APP_NAME" "$ASSEMBLY"
fi
