#!/bin/sh

X11_MODE=0

PWD=`pwd`
# Fetch the path relative to the launch point where this shell script exists.
APP_PATH=`echo $0 | awk '{split($0,patharr,"/"); idx=1; while(patharr[idx+3] != "") { if (patharr[idx] != "/") {printf("%s/", patharr[idx]); idx++ }} }'`

# Fetch the app name (its our own name)
APP_NAME=`echo $0 | awk '{split($0,patharr,"/"); idx=1; while(patharr[idx+1] != "") {idx++} printf("%s", patharr[idx]); }'`
ASSEMBLY=`echo $0 | awk '{split($0,patharr,"/"); idx=1; while(patharr[idx+1] != "") {idx++} printf("%s.exe", patharr[idx]); }'`

MONO_FRAMEWORK_PATH=/Library/Frameworks/Mono.framework/Versions/4.8.0
export DYLD_FALLBACK_LIBRARY_PATH="$DIR:$MONO_FRAMEWORK_PATH/lib:/lib:/usr/lib"
export PATH="$MONO_FRAMEWORK_PATH/bin:$PATH"

#find mono
MONO_EXE=`which mono`
if [ -x "${MONO_EXE}" ]; then
    echo Mono installed in path
else
    MONO_EXE="${MONO_FRAMEWORK_PATH}/bin/mono"
fi
echo Mono at $MONO_EXE

#mono version check
REQUIRED_MAJOR=4
REQUIRED_MINOR=8
REQUIRED_MINOR_SUB=0

VERSION_TITLE="Cannot launch $APP_NAME"
VERSION_MSG="$APP_NAME requires Mono Framework version $REQUIRED_MAJOR.$REQUIRED_MINOR.$REQUIRED_MINOR_SUB."
DOWNLOAD_URL="http://download.mono-project.com/archive/4.8.0/macos-10-universal/MonoFramework-MDK-4.8.0.macos10.xamarin.universal.pkg"
 
MONO_VERSION="$(${MONO_EXE} --version | awk '/version/ { print $5 }')"
echo Mono version $MONO_VERSION
MONO_VERSION_MAJOR="$(echo $MONO_VERSION | cut -f1 -d.)"
MONO_VERSION_MINOR="$(echo $MONO_VERSION | cut -f2 -d.)"
MONO_VERSION_MINOR_SUB="$(echo $MONO_VERSION | cut -f3 -d.)"

if [ -z "$MONO_VERSION" ] \
    || [ $MONO_VERSION_MAJOR != $REQUIRED_MAJOR ] \
    || [ $MONO_VERSION_MINOR != $REQUIRED_MINOR ] \
    || [ $MONO_VERSION_MINOR_SUB != $REQUIRED_MINOR_SUB ]
then
	osascript \
	-e "set question to display dialog \"$VERSION_MSG\" with title \"$VERSION_TITLE\" buttons {\"Cancel\", \"Download...\"} default button 2" \
	-e "if button returned of question is equal to \"Download...\" then open location \"$DOWNLOAD_URL\""
	echo "$VERSION_TITLE"
	echo "$VERSION_MSG"
	exit 1
fi

cd "$APP_PATH/Contents/Resources"

if [ "$X11_MODE" -eq "1" ]; then
	open-x11 "$APP_NAME"
else
	if [ ! -d "./bin" ]; then mkdir bin ; fi
	if [ -f "./bin/$APP_NAME" ]; then rm -f "./bin/$APP_NAME" ; fi
	ln -s "${MONO_EXE}" "./bin/$APP_NAME" 
	"./bin/$APP_NAME" "$ASSEMBLY"
fi
